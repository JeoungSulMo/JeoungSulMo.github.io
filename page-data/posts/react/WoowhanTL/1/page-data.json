{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/react/WoowhanTL/1","result":{"data":{"markdownRemark":{"id":"8b93090e-d2d1-5605-b05c-938814e0ae81","html":"<h2 id=\"수업-목표\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%97%85-%EB%AA%A9%ED%91%9C\" aria-label=\"수업 목표 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수업 목표</h2>\n<p>컴파일러의 일반적인 구조 및 유한 오토마타와 정규 표현식에 대한 이론을 학습한다.\n파싱과 연관된 어휘 분석 방법과 문법 구조를 명시하기 위한 문맥 자유 문법을 습득하고 구문 분석기의 분석 방법을 학습한다.\n중간 언어 생성과 코드 최적화를 학습한다.</p>\n<h2 id=\"compiler\" style=\"position:relative;\"><a href=\"#compiler\" aria-label=\"compiler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Compiler</h2>\n<ul>\n<li>일반적 컴파일러 구조\n<img src=\"./img/compiler1-1.PNG\" alt=\"1-1\"></li>\n<li>운영체제에서 사용</li>\n<li>전체를 읽고 실행</li>\n</ul>\n<h2 id=\"컴파일러의-종류\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"컴파일러의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일러의 종류</h2>\n<ul>\n<li>Cross Compiler\n다른기종에 맞는 목적코드를 만들어 내는 컴파일러</li>\n<li>\n<p>Interpreter</p>\n<ul>\n<li>개발 시스템 또는 교육용 시스템</li>\n<li>한줄한줄 읽어가며 중간에서도 실행이가능</li>\n</ul>\n</li>\n<li>\n<p>Preprocessor(전처리기)</p>\n<ul>\n<li>Macro substitution : 자주쓰는 기능 지정 (매크로 기능)</li>\n<li>Conditional compilation : # 이나 if처럼 수행할 코드와 수행하지 않을 코드 구분 (조건부 컴파일)</li>\n<li>Inclusion of files : 외부 파일 불러오기</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"컴파일러의-구조\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC%EC%9D%98-%EA%B5%AC%EC%A1%B0\" aria-label=\"컴파일러의 구조 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일러의 구조</h2>\n<p>!이 그림 중요!\n<img src=\"./img/compiler1-2.PNG\" alt=\"1-2\"></p>\n<h3 id=\"전단부--lexicla-analyzer-syntax-analyzer-intermediate-code-generator-로-중간-코드생성\" style=\"position:relative;\"><a href=\"#%EC%A0%84%EB%8B%A8%EB%B6%80--lexicla-analyzer-syntax-analyzer-intermediate-code-generator-%EB%A1%9C-%EC%A4%91%EA%B0%84-%EC%BD%94%EB%93%9C%EC%83%9D%EC%84%B1\" aria-label=\"전단부  lexicla analyzer syntax analyzer intermediate code generator 로 중간 코드생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전단부 : Lexicla Analyzer, Syntax Analyzer, Intermediate Code Generator 로 중간 코드생성</h3>\n<h4 id=\"1-lexical-analyzer-어휘-분석기scanner\" style=\"position:relative;\"><a href=\"#1-lexical-analyzer-%EC%96%B4%ED%9C%98-%EB%B6%84%EC%84%9D%EA%B8%B0scanner\" aria-label=\"1 lexical analyzer 어휘 분석기scanner permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Lexical Analyzer (어휘 분석기:Scanner)</h4>\n<p><img src=\"./img/compiler1-3.PNG\" alt=\"1-3\">\n토큰(Token) : 문법적으로 의미를 갖는 최소의 단위\nToken Number : 토큰마다 매칭되는 고유한 숫자가 있음</p>\n<h4 id=\"2-syntax-analyzer-구문-분석자-parser\" style=\"position:relative;\"><a href=\"#2-syntax-analyzer-%EA%B5%AC%EB%AC%B8-%EB%B6%84%EC%84%9D%EC%9E%90-parser\" aria-label=\"2 syntax analyzer 구문 분석자 parser permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Syntax Analyzer (구문 분석자: Parser)</h4>\n<p><img src=\"./img/compiler1-4.PNG\" alt=\"1-4\"></p>\n<p>구문을 문법적으로 체크한다.</p>\n<p>트리형태의 구문분석이 만들어진다.</p>\n<p>Parse 트리와 추상 구문 트리로 두가지가 있다.</p>\n<h4 id=\"3-intermediate-code-generator\" style=\"position:relative;\"><a href=\"#3-intermediate-code-generator\" aria-label=\"3 intermediate code generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Intermediate Code Generator</h4>\n<p><img src=\"./img/compiler1-5.PNG\" alt=\"1-5\"></p>\n<p>Semantic checking : 타입 자료형을 체크(의미분석)</p>\n<p>Intermediate Code Generation : 중간 코드 생성(예: Ucode 사용)</p>\n<h3 id=\"후단부--code-optimizer최적화-target-code-generator목적-코드-생성\" style=\"position:relative;\"><a href=\"#%ED%9B%84%EB%8B%A8%EB%B6%80--code-optimizer%EC%B5%9C%EC%A0%81%ED%99%94-target-code-generator%EB%AA%A9%EC%A0%81-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1\" aria-label=\"후단부  code optimizer최적화 target code generator목적 코드 생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>후단부 : Code Optimizer(최적화), Target Code Generator목적 코드 생성</h3>\n<h4 id=\"4-code-optimizer\" style=\"position:relative;\"><a href=\"#4-code-optimizer\" aria-label=\"4 code optimizer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Code optimizer</h4>\n<ul>\n<li>Optional phase</li>\n<li>코드 최적화 단계</li>\n<li>비효율적인 code를 구분해 내서 더 효율적인 code로 바꾸어 준다.</li>\n<li>\n<p>Meaning</p>\n<ul>\n<li>major part : improve running time</li>\n<li>minor part : reduce code size</li>\n</ul>\n</li>\n<li>\n<p>Criteria(기준)</p>\n<ul>\n<li>preserve the program meanings (보존성)</li>\n<li>speed up on average</li>\n<li>be worth the effort</li>\n</ul>\n</li>\n</ul>\n<p>지역 최적화</p>\n<ul>\n<li>컴파일시간 상수 연산</li>\n<li>중복된 코드제거, 불필요한 코드 제거</li>\n<li>연산량 감소</li>\n</ul>\n<p>전역 최적화</p>\n<ul>\n<li>전체과정의 흐름을보고 줄이는것 최적화의 범위와 위치에따라 구분</li>\n</ul>\n<h4 id=\"5-목적코드-생성기\" style=\"position:relative;\"><a href=\"#5-%EB%AA%A9%EC%A0%81%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B8%B0\" aria-label=\"5 목적코드 생성기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 목적코드 생성기</h4>\n<p>최적화가 완료된 중간코드를 사용될 기계에 맞는 목적 코드로 생성해준다.</p>\n<p>목적코드생성기가 하는 일 4가지</p>\n<ul>\n<li>\n<p>목적 코드 선택 및 생성</p>\n<ul>\n<li>변수들에 대한 기억 장소를 할당해야 하며 중간 코드의 의미와 일치하는 기계명령어들을 효과적으로 선택하는 코드 생성이 이뤄진다.</li>\n</ul>\n</li>\n<li>\n<p>레지스터의 운영</p>\n<ul>\n<li>컴퓨터가 빠르게 계산이 가능한 고속 레지스터가 존재하는데 이를 효율적으로 잘 사용할 알고리즘이 있어야 성능향상에 영향이있다. 고로 레지스터의 운영이 중요하다.</li>\n</ul>\n</li>\n<li>\n<p>기억 장소 할당</p>\n<ul>\n<li>심벌 테이블에 컴파일러는 소스코드에서 만난 자료들을 기억하고 있어야한다. 이 정보를 관리하고 할당하여 목적코드를 알맞게 생성한다.</li>\n</ul>\n</li>\n<li>\n<p>기계 의존적인 코드 최적화</p>\n<ul>\n<li>연속적인 명령어들을 의미적으로 동등한 하나의 명령어 또는 처리 속도가 빠른 명령어로 대체하여 기계어 코드의 성능을 향상시키는 방법</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"error-recovery\" style=\"position:relative;\"><a href=\"#error-recovery\" aria-label=\"error recovery permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Error Recovery</h3>\n<ul>\n<li>Error recovery : error가 다른 문장에 영향을 미치지 않도록 수정</li>\n<li>Error repair : error가 발생하면 복구해 주는 것</li>\n</ul>\n<h2 id=\"컴파일러-자동화-도구\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%8C%8C%EC%9D%BC%EB%9F%AC-%EC%9E%90%EB%8F%99%ED%99%94-%EB%8F%84%EA%B5%AC\" aria-label=\"컴파일러 자동화 도구 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴파일러 자동화 도구</h2>\n<ul>\n<li>Compiler Generating Tools</li>\n<li>Language가 발달할수록 많은 Compiler가 필요</li>\n<li>N개의 language가 M개의 machine에서 구현하려면 N*M개의 compiler가 필요</li>\n<li>\n<p>Compiler-Compiler Model\n<img src=\"./img/compiler2-1.PNG\" alt=\"2-1\"></p>\n<ul>\n<li>\n<p>언어와 머신을 받아들여 해당 컴파일러로 자동화</p>\n<p>1.어휘 분석기 생성기</p>\n</li>\n<li>\n<p>LEX : 정규표현식과 액션 코드로 어휘 분석기를 생성<br>\n<img src=\"./img/compiler2-2.PNG\" alt=\"2-1\"></p>\n<p>2.파서 생성기</p>\n</li>\n<li>\n<p>기본 PGS(parser generating system)\n<img src=\"./img/compiler2-3.PNG\" alt=\"2-1\">\n1.stanford PGS</p>\n<p>2.wisconsin PGS</p>\n<p>3.YACC (대표적인 PGS)</p>\n</li>\n<li>Unix에서 수행</li>\n<li>C language로 제작\n<img src=\"./img/compiler2-4.PNG\" alt=\"2-1\"></li>\n</ul>\n</li>\n<li>컴파일러 자동화</li>\n<li>PQCC: 전단부를 잘만듬, TCOL이라는 트리구조의 언어가 성능이 좋았다고 함.</li>\n<li>ACK : 후단부를 자동화하기 위한 도구의 하나, 이식성과 재목적성이 높은 컴파일러를 만들기위한 실질적인 도구</li>\n</ul>","fields":{"slug":"/posts/react/WoowhanTL/1","tagSlugs":["/tag/컴파일러/"]},"frontmatter":{"date":"2020-08-31T00:00:00","description":"약간의 OT가 끝낮자마자 바로 진도나갑니다. 1장 컴파일래 개론으로 시작하고 프로그래밍 언어, 번역기와 컴파일러, 컴파일러의 일반적인 구조, 자동화 도구 까지의 개론 설명입니다.","tags":["컴파일러"],"title":"COMPILER OT 및 1장 컴파일러 개론[20.08.31]","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/react/WoowhanTL/1"}},"staticQueryHashes":["251939775","401334301","825871152"]}