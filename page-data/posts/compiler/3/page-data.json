{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/compiler/3","result":{"data":{"markdownRemark":{"id":"49aa3bdf-d4b9-5652-a8e7-774b42b65462","html":"<h2 id=\"문법\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%B2%95\" aria-label=\"문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문법</h2>\n<blockquote>\n<p>문법을 고안할 때</p>\n</blockquote>\n<p>nonterminal symbol의 이름은 함수명과 같이 어떠한 구문구조(기능)를 대변할수있는 명칭으로 해야한다</p>\n<p>예를들어 c언어에서 자료형인 식별자가 오려면 세미콜론이 온 이후에 올 수 있음으로 이와같은 구문구조를 가진 nonterminal은 &#x3C; type > 과 같이 작성한다. &#x3C;> 기호를 사용해 해당 기능에 맞는 이름을 입력할 수 있다.</p>\n<h3 id=\"예제--괄호문법\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C--%EA%B4%84%ED%98%B8%EB%AC%B8%EB%B2%95\" aria-label=\"예제  괄호문법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 : 괄호문법</h3>\n<p>G = ({S}, {(,)}, {S -> (S)S | ε }, S)</p>\n<ul>\n<li>대부분의 언어에서 사용되는 () 괄호에대한 문법이다.</li>\n<li>짝수개로 열린 수만큼 닫히는 구조이다.</li>\n</ul>\n<h3 id=\"문법의-분류\" style=\"position:relative;\"><a href=\"#%EB%AC%B8%EB%B2%95%EC%9D%98-%EB%B6%84%EB%A5%98\" aria-label=\"문법의 분류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문법의 분류</h3>\n<p>Noam Chomsky</p>\n<blockquote>\n<p>생성규칙의 형태로 언어의 형태를 분류했다.</p>\n</blockquote>\n<ul>\n<li>type 0 : No restrictions (유지) [a->b]</li>\n<li>\n<p>type 1 : context-sensitive grammar(<strong>CSG</strong>)</p>\n<ul>\n<li>a->b, |a|≤|b|</li>\n<li>생성규칙의 오른쪽에 해당하는 b의 길이가 a보다 긴 규칙</li>\n</ul>\n</li>\n<li>\n<p>type 2 : context-free grammar(<strong>CFG</strong>)</p>\n<ul>\n<li>A->a , where A: nonterminal, a는 terminal과 nonterminal 의 합집합</li>\n</ul>\n</li>\n<li>\n<p>type 3 : Regular grammer</p>\n<ul>\n<li>A->tB, or A->t (right-linear) 우선형</li>\n<li>A->Bt, or A->t (left-linear) 좌선형</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"일반적-언어-형태\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%B0%98%EC%A0%81-%EC%96%B8%EC%96%B4-%ED%98%95%ED%83%9C\" aria-label=\"일반적 언어 형태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일반적 언어 형태</h3>\n<ul>\n<li>단순 매칭 언어 (simple matching language) : Lm = {a<sup>n</sup>b<sup>n</sup> | n ≥ 0} CFL</li>\n<li>중복 매칭 언어 (double matching language) : Ldm = {a<sup>n</sup>b<sup>n</sup>c<sup>n</sup> | n ≥ 1} CSL</li>\n<li>좌우 대칭 언어 (mirror image language) : Lmi = {ωω<sup>R</sup> | ω ∈ VT*} CFL</li>\n<li>회문 언어 (palindrome language) : Lr = {ω | ω = ω<sup>R</sup> } CFL</li>\n<li>괄호 언어 (parenthesis language) : Lp = {ω | ω: balanced parenthesis} CFL</li>\n</ul>\n<h3 id=\"언어와-인식기recognizer\" style=\"position:relative;\"><a href=\"#%EC%96%B8%EC%96%B4%EC%99%80-%EC%9D%B8%EC%8B%9D%EA%B8%B0recognizer\" aria-label=\"언어와 인식기recognizer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>언어와 인식기(recognizer)</h3>\n<table>\n<thead>\n<tr>\n<th>Grammer</th>\n<th>Language</th>\n<th>Recognizer</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type 0(무제한)</td>\n<td>recursively enumerable set</td>\n<td>Turing machine</td>\n</tr>\n<tr>\n<td>type 1(context-sensitive)</td>\n<td>context-sensitive lang</td>\n<td>Linear Bounded Automata</td>\n</tr>\n<tr>\n<td>type 2(context-free)</td>\n<td>context-free lang</td>\n<td>Pushdown Automata</td>\n</tr>\n<tr>\n<td>type 3(regular)</td>\n<td>regular lang</td>\n<td>Finite Automata</td>\n</tr>\n</tbody>\n</table>","fields":{"slug":"/posts/compiler/3","tagSlugs":["/tag/컴파일러/"]},"frontmatter":{"date":"2020-09-21T00:00:00","description":"2장 형식언어입니다. 잘 정의된 언어를 형식언어라고 부르는데 언어를 형식적으로 정의하고 표현하기위해 세부적으로 언어, 문법, 문법의 분류를 학습합니다. 이중 해당 포스트는 문법과 문법의 분류를 정리합니다.","tags":["컴파일러"],"title":"COMPILER 2장 형식 언어 (2)","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/compiler/3"}},"staticQueryHashes":["251939775","401334301","825871152"]}