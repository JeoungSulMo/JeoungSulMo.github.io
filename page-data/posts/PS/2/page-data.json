{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/PS/2","result":{"data":{"markdownRemark":{"id":"d715d18a-36f1-536c-9e40-bc6fca4e0b8d","html":"<blockquote>\n<p>이 게시물은 제작중에있습니다:D 그래프에서 필요할거같다 싶은건 다적어볼 생각이에요</p>\n</blockquote>\n<h2 id=\"그래프의-종류\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"그래프의 종류 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래프의 종류</h2>\n<ol>\n<li>단반향</li>\n<li>양방향(무방향)</li>\n</ol>\n<h2 id=\"순서\" style=\"position:relative;\"><a href=\"#%EC%88%9C%EC%84%9C\" aria-label=\"순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>순서</h2>\n<ul>\n<li><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%98-%EC%A2%85%EB%A5%98\">그래프의 종류</a></li>\n<li><a href=\"#%EC%88%9C%EC%84%9C\">순서</a></li>\n<li><a href=\"#%EC%82%AC%EC%A0%84%EC%A7%80%EC%8B%9D\">사전지식</a></li>\n<li>\n<p><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%98-%ED%91%9C%ED%98%84\">그래프의 표현</a></p>\n<ul>\n<li><a href=\"#%EC%9D%B8%EC%A0%91-%ED%96%89%EB%A0%AC-%EA%B7%B8%EB%9E%98%ED%94%84\">인접 행렬 그래프</a></li>\n<li><a href=\"#%EC%9D%B8%EC%A0%91-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B7%B8%EB%9E%98%ED%94%84\">인접 리스트 그래프</a></li>\n<li><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84-%ED%83%90%EC%83%89\">그래프 탐색</a></li>\n<li><a href=\"#bfs\">BFS</a></li>\n<li><a href=\"#dfs\">DFS</a></li>\n<li><a href=\"#%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC\">다익스트라</a></li>\n<li><a href=\"#%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%99%80%EC%83%AC\">플로이드 와샬</a></li>\n<li><a href=\"#%ED%9E%99heap\">힙(Heap)</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"사전지식\" style=\"position:relative;\"><a href=\"#%EC%82%AC%EC%A0%84%EC%A7%80%EC%8B%9D\" aria-label=\"사전지식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사전지식</h2>\n<ol>\n<li>벡터</li>\n<li>최소 힙(우선순위 큐)</li>\n<li>우선순위 큐</li>\n</ol>\n<h2 id=\"그래프의-표현\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84%EC%9D%98-%ED%91%9C%ED%98%84\" aria-label=\"그래프의 표현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래프의 표현</h2>\n<h3 id=\"인접-행렬-그래프\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A0%91-%ED%96%89%EB%A0%AC-%EA%B7%B8%EB%9E%98%ED%94%84\" aria-label=\"인접 행렬 그래프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인접 행렬 그래프</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>구현이 쉽고 직관적이다.</li>\n<li>모든정보를 저장해 정보량이 많다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ol>\n<li>메모리초과</li>\n<li>행렬로 정보저장을 실행함으로 그래프의 크기가 커지면 메모리 초과가 날수 있다.</li>\n<li>필요없는 정보</li>\n<li>불필요한 정보저장이 많이 생긴다.(노드가 늘어날 수록 모든노드와 개인별 노드간의 연결 정의가 다 추가되는데 이는 효율적이지 못하다.)</li>\n</ol>\n</li>\n<li>\n<p>구현</p>\n<ul>\n<li>1과 0으로 연결여부를 나타내어 2차원 배열을 사용해 구현</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"인접-리스트-그래프\" style=\"position:relative;\"><a href=\"#%EC%9D%B8%EC%A0%91-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EA%B7%B8%EB%9E%98%ED%94%84\" aria-label=\"인접 리스트 그래프 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인접 리스트 그래프</h3>\n<ul>\n<li>\n<p>장점</p>\n<ul>\n<li>메모리가 적고 계산량 또한 줄어든다.</li>\n</ul>\n</li>\n<li>\n<p>단점</p>\n<ul>\n<li>인접행렬에비해 구현이 어렵다.</li>\n</ul>\n</li>\n<li>\n<p>구현</p>\n<ul>\n<li>리스트나 벡터와 같은 자료구조 이용, 리스트 안에 리스트로 노드에대한 리스트 안에 해당노드와 연결되어있는 노드를 삽입하는 방식</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"그래프-탐색\" style=\"position:relative;\"><a href=\"#%EA%B7%B8%EB%9E%98%ED%94%84-%ED%83%90%EC%83%89\" aria-label=\"그래프 탐색 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그래프 탐색</h3>\n<h4 id=\"bfs\" style=\"position:relative;\"><a href=\"#bfs\" aria-label=\"bfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>BFS</h4>\n<p>정의 : 넓이 우선 탐색\n구현 : 큐</p>\n<h4 id=\"dfs\" style=\"position:relative;\"><a href=\"#dfs\" aria-label=\"dfs permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DFS</h4>\n<p>정의 : 깊이 우선 탐색\n구현 : 재귀</p>\n<h4 id=\"다익스트라\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EC%9D%B5%EC%8A%A4%ED%8A%B8%EB%9D%BC\" aria-label=\"다익스트라 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다익스트라</h4>\n<p>정의 : 한 정점에서 모든 정점에대한 최단경로 탐색. 가중치가 있는 그래프이며 가중치는 양수를 기반함\n구현 방법 : 일반 큐<code class=\"language-text\">O(V^2)</code>나 최소 힙<code class=\"language-text\">O(E+VlogV)</code>을 사용한다.\n문제 : <a href=\"https://www.acmicpc.net/problem/1753\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.acmicpc.net/problem/1753</a>\n구현</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;vector&gt;\n#include &lt;queue&gt;\n\nusing namespace std;\n\nconst int MAX_VERTEX = 20005;\nconst int MAX_EDGE = 300001;\nconst int INF = 0x7fffffff;\nint min_weight[20005]; // 노드별 최소 가중치\nint start_vertex, vertaxN, edgeN;\n\nstruct node\n{\n    int to, val;\n    node(int a, int b)\n    {\n        to = a;\n        val = b;\n    }\n};\n// 연산자 오버로딩\nbool operator&lt;(node newN, node oldN)\n{\n    return newN.val &lt; oldN.val;\n};\n\nint main()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    cout.tie(NULL);\n\n    vector&lt;node&gt; V[MAX_VERTEX]; // 그래프 정보\n    priority_queue&lt;node&gt; PQ; // 최소힙 : 노드의 가중치 기준으로 가장 작은 값의 노드를 가져옵니다.\n    cin &gt;&gt; vertaxN &gt;&gt; edgeN;\n    cin &gt;&gt; start_vertex;\n    int u, v, w;\n    for (int i = 0; i &lt; edgeN; i++) // 그래프 정보 입력\n    {\n        cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;\n        V[u].push_back(node(v, w));\n    }\n    for (int i = 1; i &lt;= vertaxN; i++) // 노드별 최소 가중치의 배열에 최대값 초기화\n        min_weight[i] = INF;\n\n    min_weight[start_vertex] = 0; // 시작 노드는 최소 가중치를 0으로 초기화\n    PQ.push(node(start_vertex, 0)); // 시작을 위해 최소힙에 시작노드와 현재가중치 입력\n\n    // 노드별 최소가중치를 구하는 작업을 시작전에 해당코드에서 알고들어갈점\n    // priority_queue는 기본적으로 최대힙으로 작동하며 최소 힙을\n    // 사용하기위해 추가적인 인자들이 필요한대 그대신 값을 음수로 지정해\n    // 최대힙을 사용해도 최소힙과 같은효과를 받았다.\n    // PQ에서 노드의 val은 음수로 저장되어 사용되는 중이다.\n    while (!PQ.empty())\n    {\n        int currentNode = PQ.top().to; // 시작점 노드\n        int currentValue = -PQ.top().val; // 최소힙처럼 사용하기위해 - 추가\n        PQ.pop();\n        // 지금까지 노드별 최소가중치와 현재까지의 가중치와 비교 후 노드별 최소가중치가 더 작으면 아래의 간선에서 이동작업을 건너뛴다.\n        if (min_weight[currentNode] &lt; currentValue)\n            continue;\n        // 현재 노드에서 연결된 간선 별로 처리\n        for (int i = 0; i &lt; V[currentNode].size(); i++)\n        {\n            int dest = V[currentNode][i].to;\n            int nextValue = currentValue + V[currentNode][i].val;\n            if (min_weight[dest] &gt; nextValue)\n            {\n                min_weight[dest] = nextValue;\n                PQ.push(node(dest, -nextValue));\n            }\n        }\n    }\n    for (int i = 1; i &lt;= vertaxN; i++)\n    {\n        if (min_weight[i] == INF)\n            cout &lt;&lt; &quot;INF\\n&quot;;\n        else\n            cout &lt;&lt; min_weight[i] &lt;&lt; &quot;\\n&quot;;\n    }\n\n    return 0;\n}</code></pre></div>\n<h4 id=\"플로이드-와샬\" style=\"position:relative;\"><a href=\"#%ED%94%8C%EB%A1%9C%EC%9D%B4%EB%93%9C-%EC%99%80%EC%83%AC\" aria-label=\"플로이드 와샬 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>플로이드 와샬</h4>\n<p>정의 : 모든 정점에서 각 정점의 최단거리를 구하는 방법</p>\n<h3 id=\"힙heap\" style=\"position:relative;\"><a href=\"#%ED%9E%99heap\" aria-label=\"힙heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>힙(Heap)</h3>\n<p>정수형 리스트에서 가장 큰수또는 가장 작은수를 구할 때 기본적으로 for문을 돌릴 시 복잡도가 O(n)이나 힙을 사용하였을때 O(log<sub>n</sub>)으로 표현할 수 있다.</p>\n<p><strong>개념</strong></p>\n<ul>\n<li>리스트하나에서 <strong>이진트리 구조</strong>를 구현한다.</li>\n<li>\n<p>종류는 최소힙, 최대힙두가지로 나뉜다.</p>\n<ul>\n<li>최소 힙 : 루트에 가장 작은 값이 오는 힙, 부모노드의 값이 자식노드보다 작음</li>\n<li>최대 힙 : 루트에 가장 큰값이 오는 힙, 부모노드의 값이 자식노드보다 큼</li>\n</ul>\n</li>\n<li>\n<p>자식 구하기</p>\n<ul>\n<li>자신의 인덱스 * 2 : 왼쪽자식</li>\n<li>자신의 인덱스 * 2 + 1 : 오른쪽 자식</li>\n</ul>\n</li>\n<li>\n<p>부모 구하기</p>\n<ul>\n<li>자신의 인덱스 / 2</li>\n</ul>\n</li>\n</ul>\n<p><strong>구현</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">#include &lt;iostream&gt;\n#include &lt;queue&gt;\n#include &lt;vector&gt;\n#include &lt;functional&gt;\n\nusing namespace std;\n\nint main()\n{\n    // less가 디폴트 값이라 최대힙을 사용시 less&lt;int&gt;를 생략해도되며 priority_queue&lt;자료형&gt; 으로 만 사용해도 된다. 최소힙을 사용하기위해 첫번째, 세번째 파라미터가 필요로해졌기 때문에 그렇다.\n    priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt; &gt; q;     // 최대힙\n    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt; q1; // 최소힙\n    q.push(3);     // 큐에 추가\n    q.push(1);\n    q.push(7);\n    q1.push(3);\n    q1.push(1);\n    q1.push(7);\n    while (!q.empty())\n    {\n        cout &lt;&lt; q.top() &lt;&lt; &quot; &quot; &lt;&lt; q1.top()&lt;&lt; endl; // 루트노드 값 출력\n        q.pop(); // 루트노드 제거\n        q1.pop();\n    }\n    return 0;\n}\n// 7 1\n// 3 3\n// 1 7</code></pre></div>","fields":{"slug":"/posts/PS/2","tagSlugs":["/tag/ps/","/tag/알고리즘/","/tag/자료구조/","/tag/코딩테스트/"]},"frontmatter":{"date":"2020-10-27T00:00:00","description":"그래프를 기반한 모든것을 작성중입니다. 아직 다 만들어지진 않았으나 계속 수정되어 갈 예정입니다. 동규야 고맙다.","tags":["PS","알고리즘","자료구조","코딩테스트"],"title":"그래프를 정리하자","socialImage":{"publicURL":"/static/624cc4a835e68430a8beec01cef8ac6c/photo.jpg"}}}},"pageContext":{"slug":"/posts/PS/2"}},"staticQueryHashes":["251939775","401334301","825871152"]}